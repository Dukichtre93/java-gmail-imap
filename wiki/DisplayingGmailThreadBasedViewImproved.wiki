= Displaying Gmail Thread Based View - Improved = 

A helpful user suggested a way that I might improve the performance of my thread based view.

Usually in `JavaMail` messages obtained from a folder are light-weight empty references to the actual messages.  Any required attributes are populated "on-demand" and therefore require a further request/response round trip to the mail server.

You can pre-empt this second attribute fetching journey by using a `FetchProfile`.  By specifying a `FetchProfile` the attributes specified are pre-fetched in the results of your original fetch or term search.  This is good as it saves you a round trip to fetch these attributes later.  For example if you interested in the Google thread id's of your messages you can specify in your `FetchProfile` that the X_GM_THRID values should be returned.

In my case for my thread based view inbox I am only interested in the message's subject, Google thread id, labels, received date and from values.  So you would imagine that I can specify only these values in my `FetchProfile`?

The IMAP specification supports fine-grained attribute selection but `JavaMail`'s default behaviour does not.

In `JavaMail` if I require any message attribute that is part of the message envelope, a collection of message attributes including date, subject, from, sender, reply-to, to, cc, bcc, in-reply-to, and message-id then I need to pre-fetch all of the other envelope message attributes.

This doesn't sound a big deal but I am trying to improve the performance so it makes sense only to download the data I actually want.

I can achieve this by using IMAPFolder's doCommand and speaking directly to the IMAP server in the IMAP protocol.

A similar approach is described here:

[http://stackoverflow.com/questions/8322836/javamail-imap-over-ssl-quite-slow-bulk-fetching-multiple-messages JavaMail IMAP over SSL quite slow - Bulk fetching multiple messages]

For demonstration purposes my example code contains two private classes (`CustomSearchProtocolCommand` and `GmailMessage`) that should probably be external classes.  It was necessary to create the `GmailMessage` POJO as an alternative to using `IMAPMessage` as a data transfer object.  This is because `IMAPMessage` is arranged in such a way as to only be populatable if `JavaMail` has downloaded the entire envelope (which is what I'm trying to avoid).